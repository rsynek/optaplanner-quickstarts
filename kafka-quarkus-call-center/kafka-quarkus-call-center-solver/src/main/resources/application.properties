#
# Copyright 2021 Red Hat, Inc. and/or its affiliates.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

########################
# OptaPlanner properties
########################
quarkus.optaplanner.solver.termination.spent-limit=30s
quarkus.optaplanner.solver.daemon=true

# To change how many solvers to run in parallel
# optaplanner.solver-manager.parallel-solver-count=4
# To run increase CPU cores usage per solver
# quarkus.optaplanner.solver.move-thread-count=2

# To detect common bugs in your code
# quarkus.optaplanner.solver.environment-mode=FULL_ASSERT

# XML file for power tweaking, defaults to solverConfig.xml (directly under src/main/resources)
# quarkus.optaplanner.solver-config-xml=org/.../callCenterSolverConfig.xml

########################
# Database properties
########################

# For normal run, use PostgreSQL that runs in a docker container.
quarkus.datasource.db-kind=postgresql
quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/call_center
quarkus.datasource.username=user
quarkus.datasource.password=password
quarkus.hibernate-orm.database.generation=create-drop

# For testing, use in-memory H2.
%test.quarkus.datasource.db-kind=h2
%test.quarkus.datasource.jdbc.url=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
%test.quarkus.datasource.username=sa
%test.quarkus.datasource.password=

########################
# Messaging properties
########################

# Configure the SmallRye Kafka connector
kafka.bootstrap.servers=localhost:9092

# Configure the Kafka source
mp.messaging.incoming.start_solver.connector=smallrye-kafka
mp.messaging.incoming.start_solver.value.deserializer=org.acme.callcenter.messaging.json.StartSolverEventDeserializer

mp.messaging.incoming.stop_solver.connector=smallrye-kafka
mp.messaging.incoming.stop_solver.value.deserializer=org.acme.callcenter.messaging.json.StopSolverEventDeserializer

mp.messaging.incoming.add_call.connector=smallrye-kafka
mp.messaging.incoming.add_call.value.deserializer=org.acme.callcenter.messaging.json.AddCallEventDeserializer

mp.messaging.incoming.remove_call.connector=smallrye-kafka
mp.messaging.incoming.remove_call.value.deserializer=org.acme.callcenter.messaging.json.RemoveCallEventDeserializer

mp.messaging.incoming.prolong_call.connector=smallrye-kafka
mp.messaging.incoming.prolong_call.value.deserializer=org.acme.callcenter.messaging.json.ProlongCallEventDeserializer

mp.messaging.outgoing.best_solution.connector=smallrye-kafka
mp.messaging.outgoing.best_solution.value.serializer=org.acme.callcenter.messaging.json.BestSolutionEventSerializer

mp.messaging.outgoing.error.connector=smallrye-kafka
mp.messaging.outgoing.error.value.serializer=org.acme.callcenter.messaging.json.ErrorEventSerializer